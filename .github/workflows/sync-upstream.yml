name: Sync Fork with Upstream

on:
  schedule:
    - cron: "0 4 * * *"   # Runs every day at 04:00 UTC
  workflow_dispatch:       # Allows manual trigger

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout your fork (master)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure git user (bot identity)
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote (if missing)
        run: |
          git remote | grep -q upstream || git remote add upstream https://github.com/lselector/seminar.git
          git remote -v

      - name: Fetch upstream branches
        run: git fetch upstream --prune

      - name: Ensure local master tracks origin/master
        run: |
          git fetch origin --prune
          git checkout -B master origin/master

      - name: Detect upstream default branch
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          HEAD_BRANCH="$(git remote show upstream | sed -n 's/.*HEAD branch: //p')"
          if [ -n "${HEAD_BRANCH:-}" ]; then
            echo "UPSTREAM_BRANCH=${HEAD_BRANCH}" >> "$GITHUB_ENV"
            echo "Detected upstream branch: ${HEAD_BRANCH}"
          elif git rev-parse --verify upstream/main >/dev/null 2>&1; then
            echo "UPSTREAM_BRANCH=main" >> "$GITHUB_ENV"
            echo "Detected upstream branch: main"
          elif git rev-parse --verify upstream/master >/dev/null 2>&1; then
            echo "UPSTREAM_BRANCH=master" >> "$GITHUB_ENV"
            echo "Detected upstream branch: master"
          else
            echo "Could not find upstream main or master branch."
            exit 1
          fi

      - name: Merge upstream changes into fork (master)
        shell: bash
        run: |
          set -euo pipefail
          BEFORE="$(git rev-parse HEAD)"

          if git merge --ff-only "upstream/${UPSTREAM_BRANCH}" 2>/dev/null; then
            echo "Fast-forward merge applied."
          else
            echo "Fast-forward not possible; attempting a regular merge."
            git merge --no-edit "upstream/${UPSTREAM_BRANCH}" || {
              echo "Automatic merge failed due to conflicts. Resolve manually."
              exit 1
            }
          fi

          AFTER="$(git rev-parse HEAD)"
          if [ "$BEFORE" = "$AFTER" ]; then
            echo "NO_PUSH=true" >> "$GITHUB_ENV"
            echo "No new commits pulled."
          else
            echo "NO_PUSH=false" >> "$GITHUB_ENV"
            echo "New commits merged."
          fi

      # OPTIONAL: Rebase instead of merge (choose one approach)
      # - name: Rebase fork onto upstream
      #   if: ${{ env.NO_PUSH == 'true' }}
      #   shell: bash
      #   run: |
      #     set -euo pipefail
      #     git rebase "upstream/${UPSTREAM_BRANCH}" || {
      #       echo "Rebase failed (conflicts). Resolve manually."
      #       exit 1
      #     }
      #     echo "NO_PUSH=false" >> "$GITHUB_ENV"

      - name: Push updated master
        if: env.NO_PUSH == 'false'
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          set -euo pipefail
          git remote set-url origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git push origin HEAD:master
